
1. Create Block class

BLOCK {
  timestamp, 
  lastHash, 
  data, 
  hash
}

TDD: Test driven development approach 
- confidence in reliable code
- speed up the coding process 


2. Create Genesis Block 
  This is the starting / origin block of the chain 
  genesis() static function on the block class

3. Create Mine Block function 
  mineBlock() static function that mines a new block with 
    -timestamp, 
    -the hash from the last block, 
    -and data 

4. Crypto Hash and SHA-256
  Secure Hash Algorithm 256 fixed 256 bits size 
  public and private key

  Produces a unique value for unique input
  A one-way function

5. Use crytpo hash function in the Mineblock function 
   Hash the timestamp, lastBlock hash, data

6. Blockchain class
   have ability to add block to blockchain

7. Checking for correct block in chain
  1. Correct block fields present
  2. Actual lastHash reference 
  3. Valid hash

  timestamp, data, lastHash should = hash

8. Validate chain static function in blockchain class
   - Check for a valid genesis block
   - check for a valid hash
   - chain has invalid block data return false
   - returns true if valid block chain

9. Replace Chain replaceChain() method
  - Check if the chain is valid and has not been tampered width
  - Check to make sure the length of chain that is being replaced is longer than the original

10. Proof of Work
  - Invented by Hashcash
    Difficulty = 6
           ------ Block data + nonce (number used once)
    Hash = 000000eb293b10ca3de8

    SHA-256 Hexadecimal form: 64 characters.
    Bitcoin uses Binary form 256 characters in binary string

  - 51% attack: where an attack controls 51% of the network

  -add nonce, and difficulty to block class, change the cryptoHash in mineBlock, and validateBlock functions.

  11. Make a global dynamic difficulty value 
    - if blocks timestamp / minerate is under  a certain value increase difficulty. If it is opposite we decrease the value.

  12. Average work .js hex to binary difficulty script
    previous and next timestamp, nextBlock, timeDiff, average;

  13. Prevent difficulty attack . Stop attacker from changing the difficulty

  14. Blockchain API and Network. Create nodes so the blockchain can interact with each other.
    Methds: 
      Read the blockchain
      Write on the Blockchain
      
      Technologies: 
        Node/express

      setup server / index.js
  
  15. Real-Time messaging Network through PubSub
    Pub / Sub Pattern
    Publishers don't look at who is looking at channels
    Subscribers broadcast to channel

    Highly scalabe: reduces tracking of socket addresses

    Up to subscriber to listen
    
    Channels
    #BLOCKCHAIN 


    Redis is used for Pub / Sub capabilities
    also used for rapid key value store

    16. Set up cross-env to generate random ports for multiple nodes on blockchain.

      distinguish default port from peer port. 
      if default port set, set a random port 

      this allows multiple subsribers to listen to blockchain 